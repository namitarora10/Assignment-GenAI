# -*- coding: utf-8 -*-
"""GenAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NDeg2gUFUt-rAO8nd9hi23DBdjQwFG9P
"""

# Install required packages
!pip install fastapi uvicorn python-multipart pydantic
!pip install chromadb
!pip install sentence-transformers
!pip install aiofiles
!pip install pyngrok

# Import necessary libraries
from fastapi import FastAPI, UploadFile, File
from fastapi.responses import JSONResponse
from sentence_transformers import SentenceTransformer
import chromadb
import PyPDF2
import docx
from pyngrok import ngrok
import os
import asyncio

# Initialize FastAPI and other components
app = FastAPI()
model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
client = chromadb.Client()

# Get or create the collection, preventing the UniqueConstraintError
collection = client.get_or_create_collection("documents")

# Function to read different file types
def read_file(file: UploadFile):
    if file.filename.endswith('.pdf'):
        reader = PyPDF2.PdfReader(file.file)
        text = ''
        for page in reader.pages:
            text += page.extract_text()
        return text
    elif file.filename.endswith('.docx'):
        doc = docx.Document(file.file)
        text = '\n'.join([para.text for para in doc.paragraphs])
        return text
    elif file.filename.endswith('.txt'):
        return file.file.read().decode('utf-8')
    else:
        return None

# Define API endpoints
@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
    text = read_file(file)
    if text:
        embedding = model.encode(text).tolist()
        collection.add(documents=[text], embeddings=[embedding], metadatas=[{"filename": file.filename}])
        return JSONResponse(content={"message": "File uploaded successfully."})
    else:
        return JSONResponse(content={"error": "Unsupported file type."}, status_code=400)

@app.get("/query/")
async def query_documents(query: str):
    query_embedding = model.encode(query).tolist()
    results = collection.query(embeddings=[query_embedding], n_results=5)
    return JSONResponse(content={"results": results})

# Set ngrok authentication token
ngrok.set_auth_token("2igrmnRIurqyKli7D0H5FHJcGEG_4iGtarf9mBUBFC2F3szq8")

# Expose the FastAPI app
public_url = ngrok.connect(8000)
print(f"Public URL: {public_url}")

# Start the FastAPI server using uvicorn.run()
import uvicorn
import asyncio

# Define a function to run the server
async def start_server():
    config = uvicorn.Config(app, host="0.0.0.0", port=8000)
    server = uvicorn.Server(config)
    await server.serve()

# Run the server in the existing event loop
try:
    asyncio.get_running_loop()  # Check if there is an existing event loop
    asyncio.create_task(start_server())  # Run the server as a task in the existing loop
except RuntimeError:
    asyncio.run(start_server())  # If no loop exists, start a new one